version: '3.8'

services:
  # Python API Service
  python-api:
    build:
      context: ./python-api
      dockerfile: Dockerfile
    container_name: voice-meeting-api
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=sqlite:///./data/meetings.db
      - WHISPER_MODEL=base
      - WHISPER_LANGUAGE=ja
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=gemma2:2b
      - TEMP_DIR=/app/temp
      - OUTPUT_DIR=/app/output
    volumes:
      - ./python-api/temp:/app/temp
      - ./python-api/output:/app/output
      - ./python-api/data:/app/data
      - ./python-api/logs:/app/logs
    depends_on:
      - ollama
    restart: unless-stopped
    networks:
      - voice-meeting-network

  # Node.js Discord Bot Service
  discord-bot:
    build:
      context: ./node-bot
      dockerfile: Dockerfile
    container_name: voice-meeting-bot
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - CLIENT_ID=${CLIENT_ID}
      - PYTHON_API_URL=http://python-api:8000
      - TEMP_DIR=/app/temp
      - LOG_LEVEL=info
    volumes:
      - ./node-bot/temp:/app/temp
      - ./node-bot/logs:/app/logs
    depends_on:
      - python-api
    restart: unless-stopped
    networks:
      - voice-meeting-network

  # Ollama Service for AI Summarization
  ollama:
    image: ollama/ollama:latest
    container_name: voice-meeting-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - voice-meeting-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: voice-meeting-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/ssl/certs:ro
    depends_on:
      - python-api
    restart: unless-stopped
    networks:
      - voice-meeting-network
    profiles:
      - production

  # PostgreSQL Database (Alternative to SQLite for production)
  postgres:
    image: postgres:15-alpine
    container_name: voice-meeting-db
    environment:
      - POSTGRES_DB=voice_meetings
      - POSTGRES_USER=voice_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - voice-meeting-network
    profiles:
      - production

  # Redis for Session Management (Optional)
  redis:
    image: redis:7-alpine
    container_name: voice-meeting-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - voice-meeting-network
    profiles:
      - production

volumes:
  ollama_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  voice-meeting-network:
    driver: bridge